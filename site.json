{"title":"Electric","githubRepo":"electricjs/electric/tree/master/packages/electricjs.com","googleAnalytics":"UA-37033501-5","showcase":[{"title":"Webda","description":"Webda is a serverless platform for developers. The idea is that you can focus only on your code and deploy everywhere.","site":"https://webda.io","image":"webda"},{"title":"Metal.js","description":"Metal is a JavaScript library that helps people build UI components in a solid, flexible way.","site":"https://metaljs.com/","repo":"https://github.com/metal/metal.js/tree/master/packages/metaljs.com","image":"metal"},{"title":"AlloyEditor","description":"A modern WYSIWYG editor built on top of CKEDITOR, designed to create modern and gorgeous web content.","site":"https://alloyeditor.com/","repo":"https://github.com/liferay/alloyeditor.com","image":"alloyeditor"},{"title":"Liferay Community","description":"A place for the Liferay community to discover open source projects and stay updated with the latest announcements.","site":"https://community.liferay.com/","image":"liferay-community"},{"title":"Lexicon","description":"A set of principles, patterns and tools created to provide a common design framework for crafting user interfaces.","site":"https://lexicondesign.io/","repo":"https://github.com/liferay/lexicon-site","image":"lexicon"},{"title":"Clay","description":"Clay is Liferay's web implementation of Lexicon Experience Language. Built with Bootstrap as a foundation, it's comprised of HTML, CSS, and JS.","site":"https://clayui.com/","repo":"https://github.com/liferay/clay/tree/master/packages/clayui.com","image":"clay"},{"title":"WeDeploy","description":"A modern deployment platform that lets you forget about infrastructure and dedicate your time to what really matters: building great apps.","site":"https://wedeploy.com/","repo":"https://github.com/wedeploy/wedeploy.com","image":"wedeploy"},{"title":"Simple Slider","description":"An extremely lightweight JavaScript carousel micro library.","site":"http://ruyadorno.github.io/simple-slider/","image":"simple-slider"},{"title":"Jonathan and Marissa","description":"A wedding site with RSVP, present list, and gallery capabilities.","site":"http://jonathanandmarissa.com/","repo":"https://github.com/jonnilundy/champagne","image":"jonathanandmarissa"},{"title":"Guia do trabalho remoto","description":"A guide to help creative professionals in the search of remote jobs.","site":"https://guiadotrabalhoremoto.com/","repo":"https://github.com/nomadsonrails/guia-do-trabalho-remoto","image":"guiadotrabalhoremoto"},{"title":"Marble","description":"A CSS library for sleek, intuitive, and powerful UI components.","site":"https://marbleui.com/","repo":"https://github.com/wedeploy/marble/tree/master/packages/marbleui.com","image":"marble"},{"title":"Electric","description":"A Node.js static generator that allows you to create beautiful documentation for your projects.","site":"https://electricjs.com/","repo":"https://github.com/electricjs/electric/tree/master/packages/electricjs.com","image":"electric"}],"index":{"title":"Home","description":"Create beautiful documentation for your projects","content":" Soy Create reusable layouts and pages using Closure Templates (aka Soy). Sass Customize the entire look and feel of our default theme using Sass. Metal.js Use existing UI components with Metal.js or just build your own. Markdown Write documentation with the simplicity of Markdown and Front Matter. Gulp Run Gulp tasks to leverage the power of node streams and get fast builds. Yeoman Kickstart new projects and themes using a Yeoman generator. ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","children":{"docs":{"title":"Documentation","description":"List of articles documenting electric.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/docs/","children":{"configuration":{"description":"Configuration options for electric-cli tasks.","icon":"gear","layout":"docs","title":"Configuration","weight":5,"content":" electric.config.js All options can be set in the electric.config.js file located in the root of your project. This file must export an Object, or a function that returns an Object. module.exports = { pathDest: 'build' }; // or module.exports = function() { return { pathDest: 'build' }; }; Options basePath Type: String Default: '' Prefixes all urls used in resources and navigation elements with the supplied path. Example: module.exports = { basePath: '/base-path' }; Now all of the generated navigation elements will be prefixed with this path. Pages It will also prefix the urls the auto-generated script and link tags. This setting can be useful for hosting services such as gh-pages which nest your project under a path generated by your project name. For example, https://electricjs.github.io/project-name/ would require the following config. module.exports = { basePath: '/project-name', deployOptions: { branch: 'gh-pages' } }; codeMirrorLanguages Type: Array Default: ['xml', 'css', 'javascript'] An Array of langauge names for syntax highlighting. See CodeMirror for a list of available languages. codeMirrorTheme Type: String Default: 'dracula' Theme to be used by CodeMirror. See CodeMirror for a list of available themes. deployOptions Type: Object Default: {lb} branch: 'wedeploy' {rb} Configuration options used by the deploy command. See gh-pages for further configuration options. envOptions Type: Object Allows you to set predefined options that can conditionally overwrite the default options from electric.config.js. Example: Let's say you need to deploy to two different branches, envOptions allows you to define a custom set of options that can be enabled via a command line flag. module.exports = { envOptions: { ghpages: { deployOptions: { branch: 'ghpages' } } }, deployOptions: { branch: 'default-branch' } }; Running electric deploy will use the default settings, publishing to the default-branch. However, if you run the following, electric deploy --env ghpages The ghpages options defined above will overwrite the default options, deploying your site to the gh-pages branch. Note: any of the configuration options can be set in envOptions, not just what is seen in the example. frontMatterHook Type: function Allows modifications of your project's front-matter before it's passed to the templates. Example: module.exports = { frontMatterHook: function(data) { data.someValue = 'Hello, World!'; return data; } }; In this example the property someValue will be accessible via the $site parameter in your pages/templates. --- description: \"Page description.\" layout: \"docs\" title: \"Page\" --- {$site.someValue} markdownOptions Type: Object An Object Literal containing configuration options for Remarkable which is used to render Markdown files. Example: module.exports = { markdownOptions: { breaks: true } }; See Remarkable's documentation for list of options. markdownRenderer Type: function|Remarkable Allows complete customization over the markdown renderer. Value can either be instance of Remarkable or a function which receives the default instance of Remarkable as an argument. Example: // New Remarkable instance module.exports = { markdownRenderer: new Remarkable() }; // Function module.exports = { markdownRenderer: function(md) { md.core.ruler.enable([ 'abbr' ]); return md; } }; pathDest Type: String Default: dist The path that generated files are placed in. Example: module.exports = { pathDest: 'build' }; Now all generated files will be placed in the build directory. pathSrc Type: String Default: src The path where all source files are located. Example: module.exports = { pathSrc: 'web' }; Now electric will look inside the web directory for all source files. metalComponents Type: Array Array of npm modules that expose Metal components. These also must be added as npm dependencies in your package.json. Example: module.exports = { metalComponents: ['electric-components'] }; The components found in the electric-components package will now be available to all soy files in your project. Note that every package listed in metalComponents must also be listed as a dependency in the project's package.json. sassOptions Type: Object Config object passed to gulp-sass. Example: module.exports = { sassOptions: { includePaths: ['node_modules/some-package/scss'] } }; staticSrc Type: Array Array of glob patterns for static files found in the options.pathSrc directory. These glob patterns target anything that isn't part of the build system (pages, layouts, styles, etc.). Note: it is not recommended to overwrite this property. uglifyBundle Type: boolean Default: false Determines if bundle files are both minified and uglified. When using electric-cli, this option defaults to true during the deploy task, and defaults to false during all others. Warning: enabling this option can significantly increase build times. vendorSrc Type: Array Default: [] Array of glob patterns for .css and .js files that should be included in the `` of your project. Example: module.exports = { vendorSrc: ['node_modules/some-project/src/min.js'] }; apiConfig Type: Object Configuration object to generate the API documentation following the JSDOC specification. Example: module.exports = { apiConfig: { layout: 'main', project: { docsConfig: { shallow: true, }, refs: ['electric@3.0.2'], repo: 'electric', soyAPIEntitiesPath: '../../../partials/ElectricAPIEntities.soy.js', src: [ 'packages/electric/lib/*/.js', ], srcPath: 'packages', user: 'electricjs' } } } Parameters layout ?String Set the name of your layout that Electric should take as a basis, See an example. (default main) project !Object project docsConfig ?Object Config object passed to documentation. default access: ['public', 'private', 'protected', 'undefined'], private: true refs !Array Set the tag of the version that your project was launched, example v1.0.0. (Remember that this is referring to releases released by the Github platform.) repo !String Set the name of the repository that contains your project. soyAPIEntitiesPath ?String Set your soy path containing APIEntitiesName.soy.js, See an example marble (default electric-marble-components/lib/ElectricAPIEntities.soy.js) src !Array Pass the location of the files you want the Electric to analyze and generate the documents. (glob is supported.) srcPath ?String Set the source path of your project. (default src) user !String Set the username or organization that your repo is on. (example electric) apiConfig.project.soyAPIEntitiesPath has its default value will be deprecated and removed in the next major releases. See issue. ","srcFilePath":"src/pages/docs/configuration/index.md","id":"configuration","location":"/docs/configuration/","url":"/docs/configuration/"},"layouts":{"description":"Documentation on base layout and sub layouts.","icon":"code-file","layout":"docs","title":"Layouts","weight":3,"content":" Base Layout All projects must have a layouts/base.soy file. This file is responsible for the HTML boilerplate of your site. Every page will be rendered with this layout. &123;namespace base&#125; /** */ &#123;template .render private=\"true\"&#125; {@param content: ?} {@param page: ?} {@param serialized: ?} {@param site: ?} {$page.title} - {$site.title} {$content} &#123;/template&#125; This layout can be editted to fit the needs of your project, but it must use base as the namespace, and it must include the {lb}$content{rb} variable which renders the content of each page. Inject Tags Inside the base.soy template there are multiple inject tags that are used by electric to import resources and scripts. inject:css/inject:js These tags are used to inject link and script tags for all thirdparty resources located in dist/vendor. inject:metal:js During the generate task they are replaced with the necessary code for automatically invoking Metal components that have been implemented in your project's soy files. Note: these tags only need to be included in the base template. The injected code is what implements the serialized param that is defined at the start of the template. serialized is stringified meta data that Metal consumes to render each page. inject:codemirror:js CodeMirror is responsible for Electric's built in syntax highlighting. This script locates all code examples and applies the appropriate syntax highlighting. Sub Layouts Additional layouts can be created in the layouts folder of your project. These layouts are simply soy templates that can be implemented by individual pages. &123;namespace docs&#125; /** */ &#123;template .render&#125; {@param content: ?} {@param elementClasses: ?} {@param page: ?} {@param site: ?} {$site.title} {$page.title} {$content} &#123;/template&#125; This template can be implemented by both soy and markdown files. The following example implements the docs layout. soy example. Sub layouts are rendered using soy's call command. --- description: \"Page description.\" title: \"Page\" --- &123;namespace page&#125; /** */ &#123;template .render&#125; {call docs.render data=\"all\"} {param content kind=\"html\"} Hello, World! {/param} {/call} &#123;/template&#125; The data=\"all\" property needs to be set if the layout in question needs to implement any of the global params (site or page). markdown example. Markdown implementation doesn't require any soy code, rather it leverages the front matter layout property to determine the layout. --- description: \"Page description.\" layout: \"docs\" title: \"Page\" --- Hello, World! By specifying layout: \"docs\", the generator will look for a soy template in the layouts directory with the docs namespace. See the section on configuration for info on configuring the markdown engine. ","srcFilePath":"src/pages/docs/layouts/index.md","id":"layouts","location":"/docs/layouts/","url":"/docs/layouts/"},"getting-started":{"description":"Getting started with a electric project.","icon":"arrow-right-rod","layout":"docs","title":"Getting Started","weight":1,"content":" Electric CLI Install npm i -g electric-cli Initialize Project electric init This will prompt you for a project id and name, then it creates a folder in your current directory with your new electric project. Run electric run This will build your newly created project and start up a development server along with a watch task for quickly making changes. You can also modify the default port 8888 by running electric run -p 3000. Project Structure Here is a basic example of an electric project. . ├── electric.config.js └── src ├── layouts │ ├── base.soy │ └── docs.soy ├── pages │ ├── docs │ │ ├── create.md │ │ ├── index.soy │ │ └── parent │ │ ├── child.md │ │ └── index.md │ └── index.soy └── site.json electric.config.js This file provides configuration options to electric. It must always be located in the root directory of your project. See configuration for more information. site.json This file contains meta data about your project. Any property can be added to this file. Front matter from all pages is merged with this data and passed to every page as a soy param. Layouts The file structure of layouts is flexible, as soy uses the namespace of every file as an identifier. All layout files must be a soy template, and the only required layout is base.soy. See layouts for more information. Pages Every file in pages with a .soy or .md extension is rendered to HTML during the build command. The file structure of pages determines the urls of your pages. For the above example, the child.md file will be located at /docs/parent/child.html after building. Pages named index will be located at the path of it's parent directory, so pages/docs/index.soy will be available at /docs/. See pages for more information. ","srcFilePath":"src/pages/docs/getting-started/index.md","id":"getting-started","location":"/docs/getting-started/","url":"/docs/getting-started/"},"metal-components":{"description":"Creating and rendering Metal components.","icon":"module","layout":"docs","title":"Metal Components","weight":4,"content":" Creating Components One of the benefits of Electric is the ability to create Metal components and invoke them in your soy layouts and pages. Components should be placed in the the src/partials directory. . └── src ├── partials │ ├── MyComponent.js │ └── MyComponent.soy ├── layouts │ ├── base.soy │ └── docs.soy └── pages └── index.soy MyComponent.soy &123;namespace MyComponent&#125; /** */ &#123;template .render&#125; Hello, World! &#123;/template&#125; MyComponent.js 'use strict'; import Component from 'metal-component'; import Soy from 'metal-soy'; import templates from './MyComponent.soy.js'; class MyComponent extends Component { attached() { console.log('MyComponent attached!'); } }; Soy.register(MyComponent, templates); export default MyComponent; Now that you have the base component files, the MyComponent template simply needs to be rendered in a page/layout. Rendering Components To render a metal component in a page/layout, simply use the call command to render the .render template of the component. --- description: \"Page description.\" title: \"Page\" --- &123;namespace page&#125; /** */ &#123;template .render&#125; {call MyComponent.render /} &#123;/template&#125; Now you should see 'MyComponent attached!' in the browser console. Isomorphic Components Electric will render your Metal components both on the client and server sides. This is a very powerful characteristic, but as Uncle Ben said *\"With great power comes great responsibility\"*. In order to make your components isomorphic, you may need to add some checks before using client-side only properties such as document or window. In the example below, we will import the isServerSide utility and use it during Metal's lifecycle methods such as attached or disposed. MyComponent.js 'use strict'; import {isServerSide} from 'metal'; import Component from 'metal-component'; import Soy from 'metal-soy'; import templates from './MyComponent.soy.js'; class MyComponent extends Component { attached() { if (isServerSide()) { return; } console.log(document); } }; Soy.register(MyComponent, templates); export default MyComponent; Electric Components The electric-base-components package contains a number of components that are compatible with electric site meta data, such as navigation and search components. Currently these components come in two themes. Marble: electric-marble-components Clay: electric-clay-components These components are invoked the same way as your own components. --- description: \"Page description.\" title: \"Page\" --- &#123;namespace page&#125; /** */ &#123;template .render&#125; {@param site: ?} {call ElectricNavigation.render} {param depth: 1 /} {param section: $site.index /} {/call} &#123;/template&#125; This will render a list with all direct descendants of the index page. See configuration for more information. ","srcFilePath":"src/pages/docs/metal-components/index.md","id":"metal-components","location":"/docs/metal-components/","url":"/docs/metal-components/"},"pages":{"description":"Creating pages in soy and markdown.","icon":"streams","layout":"docs","title":"Pages","weight":2,"content":" Front Matter All files in the pages directory must have the following front matter declared at the beginning of the file. --- title: \"Page Title\" description: \"Description.\" --- The title property will be used for auto-generated navigation elements and as the page's ``. Both the title and description properties will be used for search functionality. Soy All files ending with the .soy extension will be rendered as soy templates. --- description: \"Page description.\" title: \"Page\" --- &#123;namespace page&#125; /** */ &#123;template .render&#125; Hello, World! &#123;/template&#125; Note: all namespace properties must be unique across all files within the src directory, and every soy file must define a .render template. Site/Page Data Every page is passed a site and page param. The page param represents the front matter of the current file. {$page.title} {$page.description} The site param contains project meta data such as site.title and site.repo. It also contains the structure of the entire site which can be used to generate navigation elements. This structure data is defined as the site.index property representing the index page of the project. {$site.title} {$site.index} This data is pulled from the dist/site.json file. Additional properties can be added to this data by editing the src/site.json file. Markdown Markdown files are intended for easier writing of documentation and content, these files are rendered to HTML and then wrapped in a soy template and rendered along all soy pages. The namespace is also auto-generated based on the file path, so it does not need to be declared at the top of the file. --- description: \"Page description.\" layout: \"docs\" title: \"Page\" --- Hello, World! See google's documentation for more info. ","srcFilePath":"src/pages/docs/pages/index.md","id":"pages","location":"/docs/pages/","url":"/docs/pages/"},"search":{"description":"Documentation search results.","hidden":true,"title":"Search","content":" Electric Docs Start learning how to leverage the power of Electric. ","srcFilePath":"src/pages/docs/search/index.soy","id":"search","location":"/docs/search/","url":"/docs/search/"}},"childIds":["getting-started","pages","layouts","metal-components","configuration","search"]},"updates":{"title":"Updates","description":"Check out what's new on Electric CLI","updates":[{"version":"3.0.2","major":false,"features":[{"icon":"globe","title":"Global variables","description":"Scoped 'data' and 'page' properties inside a global 'electric' variable","url":"https://github.com/electricjs/electric/commit/29d4ccb5427cd0bcb108f42c9cbb0a111b6967cd"},{"icon":"alert","title":"Error handling","description":"Improved the way errors are catched and showed to the user","url":"https://github.com/electricjs/electric/commit/cf9ee144bf88a0829b4d4dfd3a21d9d7603abb0a"},{"icon":"pen","title":"Clay components","description":"Renamed 'electric-quartz-components' to 'electric-clay-components'","url":"https://github.com/electricjs/electric/commit/74ab2049e558c52b266e48b8a133c4c550cf2b36"}]},{"version":"3.0.1","major":false,"features":[{"icon":"command-line","title":"Publish scripts","description":"Made sure that 'npm prepublish' scripts are run prior to 'lerna publish'","url":"https://github.com/electricjs/electric/commit/0fa9a7840e710fa52c81c2bf4fe6ca8d9efedab5"}]},{"version":"3.0.0","major":true,"features":[{"icon":"star","title":"Metal rendering","description":"Replaced 'gulp-soynode' with Metal server side rendering","url":"https://github.com/electricjs/electric/commit/0f41ccafebad17a2a27face6f03460e4d264e52e"},{"icon":"hammer","title":"SSR compatible","description":"Made components to be compatible with server side rendering","url":"https://github.com/electricjs/electric/commit/4ecbd9470b21794dc67ed74fd5c70d2b9f78ddb4"},{"icon":"spinner-single-arrow","title":"Soy comments","description":"Migrated to the comment syntax used on the new Soy compiler","url":"https://github.com/electricjs/electric/issues/105"},{"icon":"external","title":"Redirect pages","description":"Updated the pattern used on the new redirect pages","url":"https://github.com/electricjs/electric/commit/c10ff5d9b8eccafa664ce4a0dea274d462611c21"}]}],"content":" ","srcFilePath":"src/pages/updates/index.soy","id":"updates","location":"/updates/","url":"/updates/"},"showcase":{"title":"Showcase","description":"Check all the sites created with Electric","content":" Visit Site ","srcFilePath":"src/pages/showcase/index.soy","id":"showcase","location":"/showcase/","url":"/showcase/"}},"childIds":["docs","showcase","updates"]}}